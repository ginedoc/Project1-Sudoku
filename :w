#include <iostream>
#include <cstdlib>

using namespace std;

#include "Sudoku.h"

/* for each elements, there should be 9 lights. The lights represent 
   the number. For example,if the number is 4, the lights for the 
   element will only have one light be up ( other will be turned off.)*/
bool light[81][9];
int lightbulb;	//for light[81][9]

void Initialize();
bool CheckMap1(int map[81]);
int stair(int ,int);
void swap(int *,int *);

void Sudoku::solve(){
	
	int i,j;
	int n = 0;
	while( n < 17 ){
		//solving skill
		Initialize();
		TurnOffOrigin();
		CheckSmlMatrix();
		CheckRow();
		CheckCol();
		OnlyRemain();
		Refill();

		if(CheckMap()){
			cout << "1" << endl;
			for(i=0;i<81;i++){	
				if(i%9==0)	cout << endl;
				cout << Sudoku::q[i] << " ";
			}
			return;
		}
		n++;
	}
	
	RemainTry();


	if(!CheckMap()){
		cout << "2" << endl;
	}
	else{
		cout << "1" << endl;
		for(i=0;i<81;i++){	
			if(i%9==0)	cout << endl;
			cout << Sudoku::q[i] << " ";
		}
		return;
	}
}

void Initialize(){
	int i,j;
	for(i=0;i<81;i++){
		for(j=0;j<9;j++){
			light[i][j] = true;
		}
	}
}

void Sudoku::TurnOffOrigin(){
	
	int i,j;

	for(i=0;i<81;i++){
		lightbulb = Sudoku::q[i];
		if( lightbulb !=  0){
			for(j=0;j<9;j++){
				if((lightbulb-1) == j) continue;
				else{ 
					light[i][j] = false;
				}
			}
		}
		else continue;
	}

}
/*
void Sudoku::RemainTry(){
	int i,j;
	int cnt;
	int tmp;
	int set[9];
	int record[81][9];
	
	for( i =0  ;i < 81 ; i++ ) set[i] = i%9+1;

	for( i = 0 ; i < 81 ; i++ ){
		
		cnt = 0;

		for( j = 0 ; j < 9 ; j++ ){
			record[i][j] = j;
			if( light[i][j] == true ){
				cnt++;
				tmp = j;
			}
			else record[i][j] = 0;
		}

		if( cnt == 1 ){
			for( j = 0 ; j < 9 ; j++ ){
				if( j != tmp ) record[i][j] = 0;
			}
		}

	}

	Sudoku::Heap_set(set,81);


}
int stair(int n, int a){
	if(a==1) return n;

	return n * stair(n,a-1); 
}
void enumerate(int set[81]){
	int i,j;
	int a;

	for( i = 0; i < 81 ; i++ ){
		
		a = set[i];	
		
		if( light[i][a] == false ) return;
		else if(light[i][a] == true) set[i] = a; 
	}
}

void Sudoku::Heap_set(int *set,int n){
	int i;
	if( n = 1 ){
		enumerate(set);
		if( CheckMap1(set) ){
			cout << "1" << endl;
			for( i = 0 ; i < 81 ; i++ ){
				Sudoku::q[i] = set[i];
			}
			return ;
		} 
	}
	else{
		for( i = 0 ; i < n ; i++ ){
			Heap_set( set,n-1);
			if( n%2 == 1 ){
				swap(set[i],set[n-1]);	
			}
			else swap(set[0],set[n-1]);
		}
	}
}

void swap(int *a,int *b){
	int tmp;
	tmp = *a;
	*a = *b;
	*b = tmp;
}
*/
void Sudoku::CheckSmlMatrix(){
	int n = 0;
	int tmp[9];
	int i,j,k;
	int a;

	while( n<9 ){
		
		a=0;

		if( (n>=0) && (n<3) ){

			for(i=0;i<3;i++){
				for(j=3*n;j<3*n+3;j++){
					tmp[a++] = Sudoku::q[i*9+j];
				}
			}	

			//turn off the light
			for(a=0;a<9;a++){
				for(i=0;i<3;i++){
					for(j=n*3;j<n*3+3;j++){
	
						lightbulb = tmp[a]-1;

						if((Sudoku::q[i*9+j] != tmp[a]) && (tmp[a] != 0))	light[i*9+j][lightbulb] = false;
						else continue;
					}
				}
			}
		}
		
		else if( (n>=3) && (n<6)){
		
			for(i = 3 ; i < 6 ; i++){
				for(j = n*3-9 ; j < n*3-6 ; j++){	
					tmp[a++] = Sudoku::q[i*9+j];
				}
			}

			//turn off the light
			for(a=0;a<9;a++){
				for(i = 3 ; i < 6 ; i++){
					for(j = n*3-9 ;j < n*3-6 ; j++ ){			
								
						lightbulb = tmp[a]-1;	
	
						if((Sudoku::q[i*9+j] != tmp[a]) && (tmp[a] != 0))	light[i*9+j][lightbulb] = false;
						else continue;
					}
				}	
			}
		}
		
		else{
			for(i = 6 ; i< 9 ; i++){
				for(j = n*3-18;j < n*3-15 ; j++){	
					tmp[a++] = Sudoku::q[i*9+j];
				}
			}
	
			//turn off the light
			for(a=0;a<9;a++){
				for(i = 6 ; i < 9 ; i++){
					for(j = n*3-18;j < n*3-15 ; j++){			
							
						lightbulb = tmp[a]-1;	
	
						if((Sudoku::q[i*9+j] != tmp[a]) && (tmp[a] != 0))	light[i*9+j][lightbulb] = false;
						else continue;
					}
				}	
			}
		}
		n++;
	}
}

void Sudoku::CheckRow(){
	int i,j;
	int n = 0;

	while(n<9){
		for(i=0;i<9;i++){
			lightbulb = Sudoku::q[n*9+i];

			for(j=0;j<9;j++){
				if((lightbulb != Sudoku::q[n*9+j]) && (lightbulb != 0) && (i != j))	light[n*9+j][lightbulb-1] = false;
			}
		}
		
		n++;
	}
}

void Sudoku::CheckCol(){
	int i,j;
	int n = 0;

	while(n < 9){
		for(i=0;i<9;i++){
			lightbulb = Sudoku::q[i*9+n];

			for(j=0;j<9;j++){
				if((lightbulb != Sudoku::q[j*9+n]) && (lightbulb != 0) && (i != j))	light[j*9+n][lightbulb-1] = false;
			}
		}
		n++;
	}
}

void Sudoku::Refill(){
	int i,j;
	int count = 0;
	int tmp;

	for(i=0;i<81;i++){
		
		count = 0;

		for(j=0;j<9;j++){
			if(light[i][j] != 0 ){
				count++;
				tmp = j + 1;
			}
		}
		if( count == 1 ) Sudoku::q[i] = tmp;
	}
	
}

void Sudoku::OnlyRemain(){
	
	int i,j,k;
	int n;
	int count = 0;
	int tmp;

	//Small Matrix
	n = 0;
	while( n<9 ){
		if( n>=0 && n<3 ){
			
			for( k=0 ; k<9 ; k++){

				count = 0;

				for( i=0 ; i<3 ; i++){
					for(j=n*3 ; j<n*3+3 ; j++){
						if(light[i*9+j][k] == true){
							count++;
							tmp = i*9+j;
						}
						if(count >=2 )	break;
					}
				}
				if(count == 1){
					for(i=0;i<9;i++)	light[tmp][i] = false;
					light[tmp][k] = true;
				}
			}
		}
		else if( n>=3 && n<6 ){

			for( k=0 ; k<9 ; k++){

				count = 0;

				for( i=3 ; i<6 ; i++){
					for( j=(n-3)*3 ; j<(n-3)*3+3 ; j++){
						if(light[i*9+j][k] == true){
							count++;
							tmp = i*9+j;
						}
						if(count >= 2)	break;
					}
				}

				if(count == 1){
					for(i=0 ; i<9 ; i++)	light[tmp][i] = false;
					light[tmp][k] = true;
				}
			}
		}
		else{
			for(k=0 ; k<9 ; k++){

				count = 0;

				for( i=6 ; i<9 ; i++){
					for( j =(n-6)*3 ; j<(n-6)*3+3 ; j++){
						if(light[i*9+j][k] == true){
							count++;
							tmp = i*9+j;
						}
						if(count >= 2)	break;
					}
				}
				if(count == 1){
					for(i=0 ; i<9 ; i++)	light[tmp][i] = false;
					light[tmp][k] = true;
				}
			}
		}
		
		n++;
	}
	
	//Row
	n = 0;
	
	while( n < 9 ){
		for(i=0;i<9;i++){

			count = 0;

			for( j=0 ; j<9 ; j++){
				if(light[n*9+j][i] == true){
					count++;
					tmp = n*9 + j;
				}
				if(count >= 2)	break;
			}

			if(count == 1){
				for( j=0 ; j<9 ; j++)	light[tmp][j] = false;
				light[tmp][i] = true;
			}
		}

		n++;
	}

	//Column
	n = 0;

	while( n < 9 ){
		for(i=0 ; i<9 ; i++){
			
			count = 0;

			for( j=0 ; j<9 ; j++){
				if(light[j*9+n][i] == true){
					count++;
					tmp = j*9 + n;
				}
				if(count >= 2)	break;
			}

			if(count == 1){
				for( j=0 ; j<9 ; j++)	light[tmp][j] = false;
				light[tmp][i] = true;
			}
		}
		n++;
	}

}


bool CheckMap1(int map[81]){
	int i,j;
	int m[8];

	for( i = 0 ; i < 9 ; i++ ) m[i] = 0;

	for( i = 0 ; i < 81 ; i++ ){
		if( map[i] == 1 )	m[0]++;
		if( map[i] == 2 )	m[1]++;
		if( map[i] == 3 )	m[2]++;
		if( map[i] == 4 )	m[3]++;
		if( map[i] == 5 )	m[4]++;
		if( map[i] == 6 )	m[5]++;
		if( map[i] == 7 )	m[6]++;
		if( map[i] == 8 )	m[7]++;
		if( map[i] == 9 )	m[8]++;
	}
	if( 	m[0] != 9 ||
	    	m[1] != 9 ||
		m[2] != 9 ||
		m[3] != 9 ||
		m[4] != 9 ||
		m[5] != 9 ||
		m[6] != 9 ||
		m[7] != 9 ||
		m[8] != 9      ) 	return false;
	else return true;
}

bool Sudoku::CheckMap(){
	int i,j;
	int count1,count2;
	int m = 0;

	for( i = 0 ; i < 81 ; i++ ){
		if( i % 9 == 0 ){
			count1 = 0;
			count2 = 0;
		}
		for( j = 0 ; j < 9 ; j++ ){
			if( light[i][j] == true ) count1++;
			if( light[j][i] == true ) count2++;	
		}
		if( count1 == 9 ) m++;
		if( count2 == 9 ) m++;
	}

	if ( m == 18 )	return true;
	else return false;
}

void Sudoku::printOut(bool Ans){
	int i,j;
	
	for(i=0;i<81;i++){
		if(i%9==0) cout << endl;
		cout << Sudoku::q[i] << endl;
	}
}

